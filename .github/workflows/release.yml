name: Release SEUnp4ker

on:
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            rid: win-x64
            arch: x64
            script: build_windows_x64.cmd
            shell: cmd
            zipshell: pwsh
          - os: windows-latest
            rid: win-arm64
            arch: arm64
            script: build_windows_arm64.cmd
            shell: cmd
            zipshell: pwsh
          # Linux
          - os: ubuntu-latest
            rid: linux-x64
            arch: x64
            script: build_linux_x64.sh
            shell: bash
            zipshell: bash
          - os: ubuntu-latest
            rid: linux-arm64
            arch: arm64
            script: build_linux_arm64.sh
            shell: bash
            zipshell: bash
          # macOS
          - os: macos-latest
            rid: osx-arm64
            arch: arm64
            script: build_macos_arm64.sh
            shell: bash
            zipshell: bash

    env:
      PROJECT_PATH: SEUnp4ker/SEUnp4ker.csproj

    steps:
      - uses: ./.github/actions/setup-dotnet
        with:
          project-path: ${{ env.PROJECT_PATH }}

      - uses: ./.github/actions/os-setup

      - uses: ./.github/actions/set-version-vars

      - uses: ./.github/actions/native-deps

      # Build zstd
      - uses: ./.github/actions/build-zstd
        with:
          script: ${{ matrix.script }}
          shell: ${{ matrix.shell }}

      # Build .NET (FDD and SCD)
      - uses: ./.github/actions/dotnet-build
        with:
          project-path: ${{ env.PROJECT_PATH }}
          rid: ${{ matrix.rid }}
          shell: ${{ matrix.shell }}

      # Zip outputs (Bash or PowerShell depending on OS)
      - name: Zip Framework-Dependent (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd out
          zip -r ../seunp4ker-${{ matrix.rid }}.zip fdd-${{ matrix.rid }}
        shell: bash

      - name: Zip Self-Contained (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd out
          zip -r ../seunp4ker-self-contained-${{ matrix.rid }}.zip scd-${{ matrix.rid }}
        shell: bash

      - name: Zip Framework-Dependent (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path out/fdd-${{ matrix.rid }}\* -DestinationPath seunp4ker-${{ matrix.rid }}.zip
        shell: pwsh

      - name: Zip Self-Contained (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path out/scd-${{ matrix.rid }}\* -DestinationPath seunp4ker-self-contained-${{ matrix.rid }}.zip
        shell: pwsh

      # Upload zipped artifacts
      - name: Archive FDD ZIP
        uses: actions/upload-artifact@v4
        with:
          name: seunp4ker-${{ matrix.rid }}-zip
          path: seunp4ker-${{ matrix.rid }}.zip

      - name: Archive SCD ZIP
        uses: actions/upload-artifact@v4
        with:
          name: seunp4ker-self-contained-${{ matrix.rid }}-zip
          path: seunp4ker-self-contained-${{ matrix.rid }}.zip

  upload-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload zipped assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip

      - name: Update Release Title
        uses: actions/github-script@v7
        with:
          script: |
            const version = 'v${{ needs.build.outputs.version }}';
            const releaseId = context.payload.release.id;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: version
            })
